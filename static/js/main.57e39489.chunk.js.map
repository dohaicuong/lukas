{"version":3,"sources":["components/SearchField.tsx","components/Navbar.tsx","components/Hero.tsx","components/ItemList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["SearchField","classes","useStyles","className","search","searchIcon","InputBase","placeholder","root","inputRoot","input","inputInput","inputProps","makeStyles","theme","position","borderRadius","shape","backgroundColor","fade","palette","common","white","marginRight","spacing","marginLeft","width","breakpoints","up","padding","height","pointerEvents","display","alignItems","justifyContent","color","paddingLeft","transition","transitions","create","Navbar","React","useState","value","setValue","AppBar","Toolbar","Typography","variant","title","Tabs","onChange","event","newValue","aria-label","Tab","label","id","searchBox","borderTop","secondary","dark","flexGrow","items","name","description","src","Hero","map","item","Item","Paper","style","Container","maxWidth","alt","marginTop","Button","ItemList","Grid","container","Array","fill","_","index","key","xs","CardActionArea","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","createMuiTheme","document","getElementById","ReactDOM","unstable_createRoot","render","ThemeProvider","CssBaseline","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.57e39489.chunk.js","sourcesContent":["import React from 'react'\nimport { InputBase, makeStyles, fade } from '@material-ui/core'\nimport SearchIcon from '@material-ui/icons/Search'\n\nconst SearchField = () => {\n  const classes = useStyles()\n\n  return (\n    <div className={classes.search}>\n      <div className={classes.searchIcon}>\n        <SearchIcon />\n      </div>\n      <InputBase\n        placeholder=\"Searchâ€¦\"\n        classes={{\n          root: classes.inputRoot,\n          input: classes.inputInput,\n        }}\n        inputProps={{ 'aria-label': 'search' }}\n      />\n    </div>\n  )\n}\n\nexport default SearchField\nconst useStyles = makeStyles(theme => ({\n  search: {\n    position: 'relative',\n    borderRadius: theme.shape.borderRadius,\n    backgroundColor: fade(theme.palette.common.white, 0.15),\n    '&:hover': {\n      backgroundColor: fade(theme.palette.common.white, 0.25),\n    },\n    marginRight: theme.spacing(2),\n    marginLeft: 0,\n    width: '100%',\n    [theme.breakpoints.up('sm')]: {\n      marginLeft: theme.spacing(3),\n      width: 'auto',\n    },\n  },\n  searchIcon: {\n    padding: theme.spacing(0, 2),\n    height: '100%',\n    position: 'absolute',\n    pointerEvents: 'none',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  inputRoot: {\n    color: 'inherit',\n  },\n  inputInput: {\n    padding: theme.spacing(1, 1, 1, 0),\n    // vertical padding + font size from searchIcon\n    paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\n    transition: theme.transitions.create('width'),\n    width: '100%',\n    [theme.breakpoints.up('md')]: {\n      width: '20ch',\n    },\n  },\n}))","import React from 'react'\nimport { AppBar, Toolbar, Typography, makeStyles, Tabs, Tab } from '@material-ui/core'\nimport SearchField from './SearchField';\n\nconst Navbar = () => {\n  const classes = useStyles()\n\n  const [value, setValue] = React.useState(0);\n  const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => setValue(newValue)\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\" className={classes.title}>\n            Luka's Owl Garden\n          </Typography>\n          <Tabs value={value} onChange={handleChange} aria-label=\"simple tabs example\">\n            <Tab label=\"Male\" id='tab-0' />\n            <Tab label=\"Female\" id='tab-1' />\n            <Tab label=\"Children\" id='tab-2' />\n          </Tabs>\n          <div className={classes.searchBox}>\n            <SearchField /> \n          </div>\n        </Toolbar>\n      </AppBar>\n    </div>\n\n  )\n}\nexport default Navbar\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    borderTop: `2px solid ${theme.palette.secondary.dark}`\n  },\n  title: {\n    flexGrow: 1,\n  },\n  searchBox: {\n    flexGrow: 1,\n    display: 'flex',\n    justifyContent: 'flex-end'\n  }\n}))","import React from 'react'\nimport Carousel from 'react-material-ui-carousel'\nimport { Paper, Button, Container } from '@material-ui/core'\n\nconst items: Item[] = [\n  {\n    name: \"Random Name #1\",\n    description: \"Probably the most random thing you have ever seen!\",\n    src: 'https://englishlightnovels.files.wordpress.com/2017/06/miku-banner.jpg'\n  },\n  {\n    name: \"Random Name #2\",\n    description: \"Hello World!\",\n    src: 'https://www.wallpaperup.com/uploads/wallpapers/2016/05/08/946495/3e0203663e6778112711e5f930dec028-700.jpg'\n  }\n]\nconst Hero = () => {\n  return (\n    <Carousel>\n      {items.map(item => <Item item={item} />)}\n    </Carousel>\n  )\n}\nexport default Hero\n\ntype ItemProps = {\n  item: Item\n}\ntype Item = {\n  name: string\n  description: string\n  src: string\n}\nconst Item: React.FC<ItemProps> = ({ item }) => {\n  return (\n    <Paper style={{ padding: '16px 40px'}}>\n      <Container maxWidth='md'>\n        <img style={{ width: '100%' }} src={item.src} alt={item.name} />\n        <h2 style={{ marginTop: 0 }}>{item.name}</h2>\n        <p>{item.description}</p>\n\n        <Button className=\"CheckButton\">\n          Check it out!\n        </Button>\n      </Container>\n    </Paper>\n  )\n}","import React from 'react'\nimport { Container, Grid, Paper, CardActionArea } from '@material-ui/core'\n\nconst ItemList = () => {\n  return (\n    <Container maxWidth='lg'>\n      <Grid container spacing={2}>\n        {Array(9).fill(1).map((_, index) => (\n          <Grid key={index} item xs={4}>\n            <Paper>\n              <CardActionArea style={{ padding: 16 }}>\n                <img\n                  style={{ width: '100%' }}\n                  src='https://vignette.wikia.nocookie.net/vocaloid/images/f/f9/Miku_Chinese.png/revision/latest?cb=20191218220041' alt='Miku'\n                />\n              </CardActionArea>\n            </Paper>\n          </Grid>\n        ))}\n      </Grid>\n    </Container>\n  )\n}\nexport default ItemList","import React from 'react'\nimport Navbar from 'components/Navbar'\nimport Hero from 'components/Hero'\nimport ItemList from 'components/ItemList'\n\nconst App = () => {\n  return (\n    <>\n      <Navbar />\n      <Hero />\n      <ItemList />\n    </>\n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from 'App'\nimport * as serviceWorker from 'serviceWorker'\nimport { ThemeProvider, createMuiTheme, CssBaseline } from '@material-ui/core'\n\nconst theme = createMuiTheme()\n\nconst root = document.getElementById('root') as HTMLElement\nReactDOM.unstable_createRoot(root).render(\n  <ThemeProvider theme={theme}>\n    <CssBaseline />\n    <App />\n  </ThemeProvider>\n)\nserviceWorker.register()\n"],"sourceRoot":""}