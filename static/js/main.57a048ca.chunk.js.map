{"version":3,"sources":["serviceWorker.ts","components/SearchField.tsx","layouts/Navbar.tsx","layouts/Footer.tsx","layouts/main.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","SearchField","classes","useStyles","className","search","searchIcon","InputBase","placeholder","root","inputRoot","input","inputInput","inputProps","makeStyles","theme","position","borderRadius","shape","backgroundColor","fade","palette","common","white","marginRight","spacing","marginLeft","width","breakpoints","up","padding","height","pointerEvents","display","alignItems","justifyContent","color","paddingLeft","transition","transitions","create","Navbar","React","useState","value","setValue","AppBar","Toolbar","Typography","variant","title","Tabs","onChange","event","newValue","aria-label","Tab","label","id","searchBox","borderTop","secondary","dark","flexGrow","Footer","Container","maxWidth","Grid","container","item","xs","background","grey","primary","contrastText","MainLayout","children","console","log","createMuiTheme","document","getElementById","ReactDOM","unstable_createRoot","render","basename","ThemeProvider","CssBaseline","Suspense","fallback","exact","path","component","lazy","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.57a048ca.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport { InputBase, makeStyles, fade } from '@material-ui/core'\nimport SearchIcon from '@material-ui/icons/Search'\n\nconst SearchField = () => {\n  const classes = useStyles()\n\n  return (\n    <div className={classes.search}>\n      <div className={classes.searchIcon}>\n        <SearchIcon />\n      </div>\n      <InputBase\n        placeholder=\"Searchâ€¦\"\n        classes={{\n          root: classes.inputRoot,\n          input: classes.inputInput,\n        }}\n        inputProps={{ 'aria-label': 'search' }}\n      />\n    </div>\n  )\n}\n\nexport default SearchField\nconst useStyles = makeStyles(theme => ({\n  search: {\n    position: 'relative',\n    borderRadius: theme.shape.borderRadius,\n    backgroundColor: fade(theme.palette.common.white, 0.15),\n    '&:hover': {\n      backgroundColor: fade(theme.palette.common.white, 0.25),\n    },\n    marginRight: theme.spacing(2),\n    marginLeft: 0,\n    width: '100%',\n    [theme.breakpoints.up('sm')]: {\n      marginLeft: theme.spacing(3),\n      width: 'auto',\n    },\n  },\n  searchIcon: {\n    padding: theme.spacing(0, 2),\n    height: '100%',\n    position: 'absolute',\n    pointerEvents: 'none',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  inputRoot: {\n    color: 'inherit',\n  },\n  inputInput: {\n    padding: theme.spacing(1, 1, 1, 0),\n    // vertical padding + font size from searchIcon\n    paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\n    transition: theme.transitions.create('width'),\n    width: '100%',\n    [theme.breakpoints.up('md')]: {\n      width: '20ch',\n    },\n  },\n}))","import React from 'react'\nimport { AppBar, Toolbar, Typography, makeStyles, Tabs, Tab } from '@material-ui/core'\nimport SearchField from 'components/SearchField'\n\nconst Navbar = () => {\n  const classes = useStyles()\n\n  const [value, setValue] = React.useState(0);\n  const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => setValue(newValue)\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\" className={classes.title}>\n            Luka's Owl Garden\n          </Typography>\n          <Tabs value={value} onChange={handleChange} aria-label=\"simple tabs example\">\n            <Tab label=\"Male\" id='tab-0' />\n            <Tab label=\"Female\" id='tab-1' />\n            <Tab label=\"Children\" id='tab-2' />\n          </Tabs>\n          <div className={classes.searchBox}>\n            <SearchField /> \n          </div>\n        </Toolbar>\n      </AppBar>\n    </div>\n\n  )\n}\nexport default Navbar\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    borderTop: `2px solid ${theme.palette.secondary.dark}`\n  },\n  title: {\n    flexGrow: 1,\n  },\n  searchBox: {\n    flexGrow: 1,\n    display: 'flex',\n    justifyContent: 'flex-end'\n  }\n}))","import React from 'react'\nimport { Grid, Container, makeStyles } from '@material-ui/core'\n\nconst Footer = () => {\n  const classes = useStyles()\n\n  return (\n    <div className={classes.root}>\n      <Container maxWidth='lg'>\n        <Grid container>\n          <Grid item xs={6}>\n            Logo\n          </Grid>\n          <Grid item xs={3}>\n            Lien he\n          </Grid>\n          <Grid item xs={3}>\n            Facebook\n          </Grid>\n        </Grid>\n      </Container>\n    </div>\n  )\n}\nexport default Footer\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    background: theme.palette.grey['800'],\n    color: theme.palette.primary.contrastText\n  }\n}))","import React from 'react'\nimport Navbar from './Navbar'\nimport Footer from './Footer'\n\nconst MainLayout: React.FC = ({ children }) => {\n  console.log(children)\n  return (\n    <div className='MainLayout'>\n      <Navbar />\n      {children}\n      <Footer />\n    </div>\n  )\n}\nexport default MainLayout","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport * as serviceWorker from 'serviceWorker'\n\nimport { ThemeProvider, createMuiTheme, CssBaseline } from '@material-ui/core'\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\nimport MainLayout from 'layouts/main'\n\nconst theme = createMuiTheme()\n\nconst root = document.getElementById('root') as HTMLElement\nReactDOM.unstable_createRoot(root).render(\n  <BrowserRouter basename='/lukas'>\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <MainLayout>\n        <React.Suspense fallback='root loadding...'>\n          <Switch>\n            <Route exact path='/' component={React.lazy(() => import('pages/Home'))} />\n          </Switch>\n        </React.Suspense>\n      </MainLayout>\n    </ThemeProvider>\n  </BrowserRouter>\n)\nserviceWorker.unregister()\n"],"sourceRoot":""}